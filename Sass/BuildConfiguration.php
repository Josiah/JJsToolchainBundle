<?php

namespace JJs\Bundle\ToolchainBundle\Sass;

use JJs\Bundle\ToolchainBundle\Toolchain\BuildInterface;
use JJs\Bundle\ToolchainBundle\Toolchain\ServerInterface;
use Symfony\Component\HttpKernel\KernelInterface;
use Symfony\Component\Process\ProcessBuilder;

/**
 * Sass Configuration Manager
 *
 * Manages the configuration of a sass build and exposes it as both a tool and 
 * a server in the toolchain.
 *
 * @author Josiah <josiah@jjs.id.au>
 */
class BuildConfiguration implements BuildInterface, ServerInterface
{
    /**
     * Application kernel
     * 
     * @var KernelInterface
     */
    protected $kernel;

    /**
     * Sass binary
     * 
     * @var string
     */
    protected $bin;

    /**
     * Compass flag
     *
     * Indicates whether the compass library includes and settings should be
     * used.
     * 
     * @var boolean
     */
    protected $compass = false;

    /**
     * Output style
     *
     * Indicates how the css generated by SASS should be formatted.
     * 
     * @var string
     */
    protected $style;

    /**
     * Numerical precision
     *
     * Sets the number of digits of precision which should be used in numerical
     * calculations.
     * 
     * @var int
     */
    protected $precision;

    /**
     * Files to process
     * 
     * @var array
     */
    protected $files = [];

    /**
     * Load paths for sass
     * 
     * @var array
     */
    protected $paths = [];

    /**
     * @param KernelInterface $kernel Application kernel
     * @param string          $bin    Sass binary executable
     */
    public function __construct(KernelInterface $kernel, $bin)
    {
        $this->kernel = $kernel;
        $this->bin    = $bin;
    }

    /**
     * Gets the alias of this build configuration
     * 
     * @return string
     */
    public function getAlias()
    {
        return 'sass';
    }

    /**
     * Gets the name of this build configuration
     * 
     * @return string
     */
    public function getName()
    {
        return 'SASS';
    }

    /**
     * Indicates whether compass is enabled on this build configuration
     * 
     * @return boolean TRUE if compass is enabled; FALSE otherwise.
     */
    public function isCompassEnabled()
    {
        return $this->compass;
    }

    /**
     * Sets whether compass is enabled in this build configruation
     * 
     * @param boolean $enabled TRUE if compass is enabled; FALSE otherwise.
     * @return BuildConfiguration
     */
    public function setCompassEnabled($enabled)
    {
        $this->compass = (bool) $enabled;

        return $this;
    }

    /**
     * Gets the css output style
     * 
     * @return string
     */
    public function getOutputStyle()
    {
        return $this->style;
    }

    /**
     * Sets the css output style
     * 
     * @param string $style Output style
     */
    public function setOutputStyle($style)
    {
        $this->style = $style;

        return $this;
    }

    /**
     * Adds a file for processing
     * 
     * @param string $input  Input path
     * @param string $output Output path
     * @return BuildConfiguration
     */
    public function addFile($input, $output)
    {
        $this->files[] = [$input, $output];

        return $this;
    }

    /**
     * Adds a load path where sass will look for imports
     * 
     * @param string $path Load path
     * @return BuildConfiguration
     */
    public function addLoadPath($path)
    {
        $this->paths[] = $path;

        return $this;
    }

    /**
     * Creates a process with the binary and configured outputs
     * 
     * @param boolean $watch Whether the watch or update flag should be set
     * @return Process
     */
    private function createProcess($watch = false)
    {
        // Prepare to build the process
        $builder = new ProcessBuilder([
            $this->bin,
            $watch ? '--watch' : '--update',
        ]);

        // Enable the compass flag if required
        if ($this->compass) $builder->add('--compass');

        // Enable output style if set
        if ($this->style) $builder->add('--style')->add($this->style);

        // Enable precision if set
        if (!is_null($this->precision)) $builder->add('--precision')->add($this->precision);

        // Add the files
        foreach ($this->files as $file) {
            list($input, $output) = $file;

            // Locate any kernel resources
            if (substr($input, 0, 1) === '@')  $input  = $this->kernel->locateResource($input);
            if (substr($output, 0, 1) === '@') $output = $this->kernel->locateResource($output);

            // Set the input/output paths
            $builder->add("{$input}:{$output}");
        }

        // Add the load paths
        foreach ($this->paths as $path) {
            if (substr($path, 0, 1) === '@') $path = $this->kernel->locateResource($path);

            // Set the load path
            $builder->add("--load-path")->add($path);
        }

        return $builder->getProcess();
    }

    /**
     * Creates a sass build process for this configuration
     * 
     * @return Process
     */
    public function build()
    {
        return $this->createProcess(false);
    }

    /**
     * Creates a sass server process for this configuration
     * 
     * @return Process
     */
    public function server()
    {
        return $this->createProcess(true);
    }
}